{"version":3,"sources":["TaskView.js","TaskTypeView.js","TimeCardView.js","appGlobal.js"],"names":[],"mappingsnaxWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["\n// load all javascript once the document is ready.\n$(document).ready(function(){\n\n    String.prototype.isEmpty = function() {\n        return (this.length === 0 || !this.trim());\n    };\n\n    TaskType();\n    isValidHourMinute();\n    getStartTime();\n    getEndTime();\n    loseFocusOnStartTime();\n    loseFocusOnEndTime();\n    loseFocusOnType();\n    enabledDisabledSaveButton();\n    onClickOnSaveButton();\n    causeTheTopLineOfTableHeaderToFade();\n\n});\n\n// convert rgb into hex for ez'er comparisons.\nfunction rgb2hex(rgb){\n    rgb = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n    return \"#\" +\n        (\"0\" + parseInt(rgb[1],10).toString(16)).slice(-2) +\n        (\"0\" + parseInt(rgb[2],10).toString(16)).slice(-2) +\n        (\"0\" + parseInt(rgb[3],10).toString(16)).slice(-2);\n}\n\n// SaveButton class to save state of required input fields.\nfunction SaveButton(type, startt, endt) {\n    this.type = type;\n    this.startt = startt;\n    this.endt = endt;\n}\nSaveButton.prototype.getType = function() {\n    return this.type;\n};\nSaveButton.prototype.setType = function(type) {\n    this.type = type;\n};\nSaveButton.prototype.getStartt = function() {\n    return this.startt;\n};\nSaveButton.prototype.setStartt = function(startt) {\n    this.startt = startt;\n};\nSaveButton.prototype.getEndt = function() {\n    return this.endt;\n};\nSaveButton.prototype.setEndt = function(endt) {\n    this.endt = endt;\n};\nSaveButton.prototype.isReady = function() {\n    if (this.type && this.startt && this.endt) {\n        return true;\n    }\n\n    return false;\n};\n\nvar saveButton = new SaveButton(false,false,false);\n\n// populate the type drop-down box on the Task View.\nfunction TaskType() {\n    //$('#taskType').empty();\n    //$('#taskType').append(\"<caption>Loading...</caption>\");\n    $.ajax({\n        type: \"GET\",\n        url: \"/get_all_tasks\",\n        contentType: \"application/json; charset=utf8\",\n        dataType: \"json\",\n        success: function(data) {\n            //$('#taskType').empty();\n            //$('#taskType').append(\"<option value='0'>--Select Type--</option>\");\n            $.each(data,function(i,item) {\n                $('#taskType').append(\"<option value=\" + data[i].id + \">\" + data[i].type + \"</option>\");\n            });\n        },\n        complete: function() {\n        }\n    });\n\n}\n\n// time validation are performed via http://momentjs.com/\nfunction isValidHourMinute(ttime) {\n\n    var myDateTime = \"1960-10-03 \" + ttime;\n    var formats = [\"YYYY-MM-DD LT\",\"YYYY-MM-DD h:mm:ss A\",\"YYYY-MM-DD HH:mm:ss\",\"YYYY-MM-DD HH:mm\"];\n\n    if (moment(myDateTime, formats, true).isValid()) {\n        return true;\n    }\n\n    return false;\n\n}\n\n// populate start and end time boxes.\n// for more details, see https://github.com/jonthornton/jquery-timepicker#timepicker-plugin-for-jquery\nfunction getStartTime() {\n    $('#startt-search').timepicker({'show2400' : true,\n                             'timeFormat': 'H:i',\n                             'scrollDefault': 'now',\n                             'useSelect' : false });\n}\nfunction getEndTime() {\n    $('#endt-search').timepicker({'show2400' : true,\n                           'timeFormat': 'H:i',\n                           'scrollDefault': 'now',\n                           'useSelect' : false });\n}\n\n// calculate hours worked and populate the hours worked cell.\nfunction loseFocusOnEndTime() {\n    $(\"#endt-search\").focusout(function(){\n        var t1Str = $('#startt-search').text($(this)).val();\n        var t1 = t1Str.split(':');\n\n        var t2Str = $('#endt-search').text($(this)).val();\n        if (!isValidHourMinute(t2Str) && !t2Str.isEmpty()) {\n            $('#endt-search').css('background-color', 'pink');\n            saveButton.setEndt(false);\n            enabledDisabledSaveButton();\n            $('#hoursWorked').val(\"\");\n\n            return;\n        }\n        else {\n            $('#endt-search').css('background-color', 'white');\n            saveButton.setEndt(true);\n            enabledDisabledSaveButton();\n        }\n        var t2 = t2Str.split(':');\n\n        if (!t2Str.isEmpty() && !checkForEndTimeOverlaps()) {\n            saveButton.setEndt(false);\n            enabledDisabledSaveButton();\n            $('#hoursWorked').val(\"\");\n\n            return;\n        }\n\n        if (!t1Str.isEmpty() && !t2Str.isEmpty()) {\n            var beginningTime = moment({H: t1[0], s: t1[1]});\n            var endTime = moment({H: t2[0], s: t2[1]});\n            if (!beginningTime.isBefore(endTime)) {\n                $('#endt-search').css('background-color', 'pink');\n                saveButton.setEndt(false);\n                enabledDisabledSaveButton();\n                $('#hoursWorked').val(\"\");\n\n                return;\n            }\n            else {\n                $('#endt-search').css('background-color', 'white');\n                saveButton.setEndt(true);\n                enabledDisabledSaveButton();\n            }\n\n            if (rgb2hex($('#startt-search').css('background-color')) === rgb2hex($('#endt-search').css('background-color')) &&\n                rgb2hex($('#endt-search').css('background-color')) === \"#ffffff\") {\n                var t1Min = Math.floor(t1[0]) *60 + Math.floor(t1[1]);\n                var t2Min = Math.floor(t2[0]) *60 + Math.floor(t2[1]);\n\n                var diff = (t2Min - t1Min)/60;\n\n                $('#hoursWorked').val(Math.round(diff * 10000 )/10000);\n            }\n        }\n    });\n}\n\nfunction loseFocusOnStartTime() {\n    $(\"#startt-search\").focusout(function(){\n        var t1Str = $('#startt-search').text($(this)).val();\n        if (!isValidHourMinute(t1Str) && !t1Str.isEmpty()) {\n            $('#startt-search').css('background-color', 'pink');\n            saveButton.setStartt(false);\n            enabledDisabledSaveButton();\n            $('#hoursWorked').val(\"\");\n\n            return;\n        }\n        else {\n            $('#endt-search').css('background-color', 'white');\n            $('#startt-search').css('background-color', 'white');\n            saveButton.setStartt(true);\n            enabledDisabledSaveButton();\n        }\n        var t1 = t1Str.split(':');\n\n        if (!checkForStartTimeOverlaps()) {\n            saveButton.setStartt(false);\n            enabledDisabledSaveButton();\n            $('#hoursWorked').val(\"\");\n\n            return;\n        }\n\n        var t2Str = $('#endt-search').text($(this)).val();\n        var t2 = t2Str.split(':');\n\n        if (t1Str.isEmpty() && t2Str.isEmpty()) {\n            clearTaskTable();\n        }\n\n        if (!t1Str.isEmpty() && !t2Str.isEmpty()) {\n            var beginningTime = moment({H: t1[0], s: t1[1]});\n            var endTime = moment({H: t2[0], s: t2[1]});\n            if (!beginningTime.isBefore(endTime)) {\n                $('#startt-search').css('background-color', 'pink');\n                saveButton.setStartt(false);\n                enabledDisabledSaveButton();\n                $('#hoursWorked').val(\"\");\n\n                return;\n            }\n            else {\n                $('#startt-search').css('background-color', 'white');\n                saveButton.setStartt(true);\n                enabledDisabledSaveButton();\n            }\n\n            if (rgb2hex($('#startt-search').css('background-color')) === rgb2hex($('#endt-search').css('background-color')) &&\n                rgb2hex($('#endt-search').css('background-color')) === \"#ffffff\") {\n                var t1Min = Math.floor(t1[0]) *60 + Math.floor(t1[1]);\n                var t2Min = Math.floor(t2[0]) *60 + Math.floor(t2[1]);\n\n                var diff = (t2Min - t1Min)/60;\n\n                $('#hoursWorked').val(Math.round(diff * 10000 )/10000);\n            }\n        }\n    });\n}\n\nfunction loseFocusOnType() {\n    $(\"#taskType\").change(function () {\n        var v1 = Math.floor($('#taskType').val());\n\n        if (v1 === 0) {\n            saveButton.setType(false);\n            enabledDisabledSaveButton();\n            $(\"#taskType\").empty();\n            $('#taskType').append(\"<option value='0'>--Select Type--</option>\");\n            TaskType();\n        } else {\n            saveButton.setType(true);\n            enabledDisabledSaveButton();\n        }\n    });\n}\n\n// special case trap for two form events:\n// - clicking the save button via jquery.\n// - hitting the return key when enough info has been filled out by the user to send to the server via javascript.\n\n// override for events for click and key press.\n// this is to allow for the user to be able to hit the return key, and if the form has the data it needs it will\n// create the record.  In essence, a time saver for the user.\n//\n// Note: the #hourWorked ID on the form has been set to disabled via the html.  In order to pass the value to the\n//       server the #hoursWored ID needs to be set to disabled = false.  Once the refresh happens by the http request\n//       response cycle, the #hourWorked ID will be set back to disabled = true.\n//\nfunction onClickOnSaveButton() {\n\n    $('#saveButton').click(function() {\n        $('#hoursWorked').prop('disabled', false);\n    });\n\n    $(document).keypress(function(e) {\n        forKeyPress(e);\n    });\n\n    // the return key pressed, check to see if enough info has been populated to send to the server.\n    var forKeyPress = function(e) {\n        var startT = $('#startt-search').text($(this)).val();\n        var endT = $('#endt-search').text($(this)).val();\n        var hoursWorked = $('#hoursWorked').val();\n\n        // return key pressed (e.which == 13) and the start and end times have a value, but hours worked has NOT been calculated.\n        if (e.which == 13 && startT !== \"\" && endT !== \"\" && hoursWorked === \"\") {\n            var t1 = startT.split(':');\n            var t2 = endT.split(':');\n\n            var t1Min = Math.floor(t1[0]) *60 + Math.floor(t1[1]);\n            var t2Min = Math.floor(t2[0]) *60 + Math.floor(t2[1]);\n\n            var diff = (t2Min - t1Min)/60;\n\n            $('#hoursWorked').css('background-color', '#eee');\n            $('#hoursWorked').prop('disabled', false);\n            $('#hoursWorked').val(Math.round(diff * 10000 )/10000);\n            $(\"#saveButton\").click();\n        } else {\n            // return key pressed (e.which == 13) and the start, end, and hoursWorked have values.\n            if (e.which == 13 && saveButton.isReady() && hoursWorked !== \"\") {\n                $('#hoursWorked').css('background-color', '#eee');\n                $('#hoursWorked').prop('disabled', false);\n                $('#hoursWorked').val(hoursWorked);\n                $('#saveButton').click();\n            }\n        }\n\n    };\n}\n\nfunction enabledDisabledSaveButton() {\n    if (saveButton.isReady()) {\n        $(\"#saveButton\").prop('disabled', false);\n    } else {\n        $(\"#saveButton\").prop('disabled', true);\n    }\n}\n\nfunction checkForStartTimeOverlaps() {\n\n    var table = document.getElementById(\"taskTable\");\n    for (var i = 0, row; row = table.rows[i]; i++) {\n        var t1Str = $('#startt-search').text($(this)).val();\n        var t1 = t1Str.split(':');\n        var timeToCheck = moment({H: t1[0], m: t1[1]});\n\n        var t2Str = row.cells[1].innerHTML;\n        var t2 = t2Str.split(':');\n        var cellStartTime = moment({H: t2[0], m: t2[1]});\n\n        var t2Str = row.cells[2].innerHTML;\n        var t2 = t2Str.split(':');\n        var cellEndTime = moment({H: t2[0], m: t2[1]});\n        var cellEndTimeLess1Second = moment({H: t2[0], m: t2[1]}).subtract(1, 'seconds');\n\n        if (!timeToCheck.isBefore(cellStartTime) && !timeToCheck.isAfter(cellEndTime)) {\n            if (!timeToCheck.isBefore(cellStartTime) && !timeToCheck.isAfter(cellEndTimeLess1Second)) {\n                $('#startt-search').css('background-color', 'pink');\n                row.cells[1].style.color = \"pink\";\n                row.cells[1].style.fontWeight = 'bold';\n                row.cells[2].style.color = \"pink\";\n                row.cells[2].style.fontWeight = 'bold';\n\n                return false;\n            } else {\n                $('#startt-search').css('background-color', 'white');\n                row.cells[1].style.color = \"black\";\n                row.cells[1].style.fontWeight = 'normal';\n                row.cells[2].style.color = \"black\";\n                row.cells[2].style.fontWeight = 'normal';\n            }\n        }\n    }\n\n    saveButton.setStartt(true);\n    enabledDisabledSaveButton();\n\n    return true;\n}\n\nfunction checkForEndTimeOverlaps() {\n\n    var table = document.getElementById(\"taskTable\");\n    for (var i = 0, row; row = table.rows[i]; i++) {\n        var t1Str = $('#endt-search').text($(this)).val();\n        var t1 = t1Str.split(':');\n        var timeToCheck = moment({H: t1[0], m: t1[1]});\n        var timeToCheckLess1Second = moment({H: t1[0], m: t1[1]}).subtract(1, 'seconds');\n\n\n        var t2Str = row.cells[1].innerHTML;\n        var t2 = t2Str.split(':');\n        var cellStartTime = moment({H: t2[0], m: t2[1]});\n\n        var t2Str = row.cells[2].innerHTML;\n        var t2 = t2Str.split(':');\n        var cellEndTime = moment({H: t2[0], m: t2[1]});\n\n        if (!timeToCheck.isBefore(cellStartTime) && !timeToCheck.isAfter(cellEndTime)) {\n            if (!timeToCheckLess1Second.isBefore(cellStartTime) && !timeToCheckLess1Second.isAfter(cellEndTime)) {\n                $('#endt-search').css('background-color', 'pink');\n                row.cells[1].style.color = \"pink\";\n                row.cells[1].style.fontWeight = 'bold';\n                row.cells[2].style.color = \"pink\";\n                row.cells[2].style.fontWeight = 'bold';\n\n                return false;\n            } else {\n                $('#endt-search').css('background-color', 'white');\n                row.cells[1].style.color = \"black\";\n                row.cells[1].style.fontWeight = 'normal';\n                row.cells[2].style.color = \"black\";\n                row.cells[2].style.fontWeight = 'normal';\n            }\n        }\n    }\n\n    saveButton.setEndt(true);\n    enabledDisabledSaveButton();\n\n    return true;\n}\n\nfunction clearTaskTable() {\n\n    var table = document.getElementById(\"taskTable\");\n    for (var i = 0, row; row = table.rows[i]; i++) {\n        row.cells[1].style.color = \"black\";\n        row.cells[1].style.fontWeight = 'normal';\n        row.cells[2].style.color = \"black\";\n        row.cells[2].style.fontWeight = 'normal';\n    }\n    saveButton.setStartt(false);\n    saveButton.setEndt(false);\n    enabledDisabledSaveButton();\n\n    return true;\n}\n","\n// namespace for userTaskView.blade.php\nvar taskType = {};\n\n// load all javascript once the document is ready.\n$(document).ready(function(){\n    taskType.loseFocusOnTaskType();\n    taskType.loseFocusOnDescription();\n    taskType.causeTheTopLineOfTableHeaderToFade();\n    taskType.pencilButtonClicked();\n});\n\n// SaveButton class to save state of required input fields.\ntaskType.SaveButton = function(taskType, description) {\n    this.taskType = taskType;\n    this.description = description;\n}\ntaskType.SaveButton.prototype.getType = function() {\n    return this.taskType;\n};\ntaskType.SaveButton.prototype.setType = function(taskType) {\n    this.taskType = taskType;\n};\ntaskType.SaveButton.prototype.getDescription = function() {\n    return this.description;\n};\ntaskType.SaveButton.prototype.setDescription = function(description) {\n    this.description = description;\n};\ntaskType.SaveButton.prototype.isReady = function() {\n    if (this.taskType && this.description) {\n        return true;\n    }\n\n    return false;\n};\n\ntaskType.saveButton = new taskType.SaveButton(false,false);\n\nfunction enabledDisabledSaveButton01() {\n    if (taskType.saveButton.isReady()) {\n        $(\"#saveButtonTaskType\").prop('disabled', false);\n    } else {\n        $(\"#saveButtonTaskType\").prop('disabled', true);\n    }\n}\n\ntaskType.causeTheTopLineOfTableHeaderToFade = function() {\n    var valueIs = $('#thAlertMessage').val();\n    if (typeof valueIs != 'undefined') {\n        (setTimeout(function () {\n            document.getElementById('thAlertMessage').style.display='none';\n            $('#thNoAlertMessage').fadeIn(3000);\n        }, 10000))();\n    }\n};\n\n// rom http://www.mediacollege.com/internet/javascript/text/count-words.html\ntaskType.countWords = function countWords(s){\n    //s = s.replace(/(^\\s*)|(\\s*$)/gi,\"\");//exclude  start and end white-space\n    //s = s.replace(/[ ]{2,}/gi,\" \");//2 or more space to 1\n    //s = s.replace(/\\n /,\"\\n\"); // exclude newline with a start spacing\n    return s.split(' ').length;\n};\n\ntaskType.isTaskTypeADuplicate = function() {\n\n    if(!String.prototype.trim) {\n        String.prototype.trim = function () {\n            return this.replace(/^\\s+|\\s+$/g,'');\n        };\n    }\n\n    var table = document.getElementById(\"taskTypeTable\");\n    for (var i = 0, row; row = table.rows[i]; i++) {\n        var t1Str = $('#taskType01').text($(this)).val();\n        t1Str = t1Str.trim();\n\n        var t2Str = row.cells[0].innerHTML;\n        t2Str = t2Str.trim();\n\n        if (t1Str.toUpperCase() === t2Str.toUpperCase()) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// check for single none duplicated words.\ntaskType.loseFocusOnTaskType = function() {\n    $(\"#taskType01\").focusout(function(){\n        var t1Str = $('#taskType01').text($(this)).val();\n\n        // only allow one word\n        if (taskType.countWords(t1Str) > 1) {\n            $('#taskType01').css('background-color', 'pink');\n\n            $('#taskTypeHeader').text(\"Error: Type restricted to one word.\");\n            $('#taskTypeHeader').css('color', 'brown');\n            $('#taskTypeHeader').css('font-weight', 'bold');\n            taskType.saveButton.setType(false);\n            enabledDisabledSaveButton01();\n\n            return;\n        }\n\n        // nothing entered\n        if (t1Str.isEmpty()) {\n            taskType.saveButton.setType(false);\n            enabledDisabledSaveButton01();\n\n            // set error condition back to a none error color.\n            $('#taskType01').css('background-color', 'white');\n            $('#taskTypeHeader').text(\"Task Type Maintenance\");\n            $('#taskTypeHeader').css('color', 'black');\n\n            return;\n        }\n\n        if (taskType.isTaskTypeADuplicate()) {\n            $('#taskType01').css('background-color', 'pink');\n\n            $('#taskTypeHeader').text(\"Error: Type already exists.\");\n            $('#taskTypeHeader').css('color', 'brown');\n            $('#taskTypeHeader').css('font-weight', 'bold');\n            taskType.saveButton.setType(false);\n            enabledDisabledSaveButton01();\n\n            return;\n        } else {\n            // set error condition back to a none error color.\n            $('#taskType01').css('background-color', 'white');\n            document.getElementById(\"taskTypeHeader\").style.color=$(\"#taskTypeId\").css(\"color\");\n            $('#taskTypeHeader').text(\"Task Type Maintenance\");\n        }\n\n        // place in correct format\n        var tmp = t1Str.toLowerCase();\n        tmp = tmp.charAt(0).toUpperCase() + tmp.slice(1);\n        $('#taskType01').val(tmp);\n\n        taskType.saveButton.setType(true);\n        enabledDisabledSaveButton01();\n\n    });\n};\n\n// must have a value.\ntaskType.loseFocusOnDescription = function() {\n    $(\"#description\").focusout(function(){\n        var t1Str = $('#description').text($(this)).val();\n\n        // nothing entered\n        if (t1Str.isEmpty()) {\n            taskType.saveButton.setDescription(false);\n            enabledDisabledSaveButton01();\n\n            return;\n        }\n\n        // place in correct format\n        var tmp = t1Str.toLowerCase();\n        tmp = tmp.charAt(0).toUpperCase() + tmp.slice(1);\n        $('#description').val(tmp);\n\n        taskType.saveButton.setDescription(true);\n        enabledDisabledSaveButton01();\n\n        // tab to save button\n        $(\"#saveButtonTaskType\").focus();\n\n    });\n};\n\n\n// when the taskTypeEditButton is clicked.\ntaskType.pencilButtonClicked = function () {\n    $('.taskTypeEditButton').click(function() {\n\n        // get childern\n        //var rowTaskType_id = $('.taskTypeEditButton input[name=rowTaskType_id]').val();\n\n        // parse current row.\n        var $row = $(this).closest('tr');\n        var $columns = $row.find('td');\n        var rowTaskType_id = $columns.find('input[name=rowTaskType_id]').val();\n\n        // derive type and description values.\n        var vType = $columns[0].outerText;\n        var vDesc = $columns[1].outerText;\n\n        // populate the type and description fields on the form.\n        $('#taskType01').val(vType);\n        $('#description').val(vDesc);\n        $('input[name=saveTaskType_id]').val(rowTaskType_id);\n\n        // set save button to true.\n        taskType.saveButton.setType(true);\n        taskType.saveButton.setDescription(true);\n        enabledDisabledSaveButton01();\n    });\n\n};\n\n\n\n","\n// namespace.\nvar timeCard = {};\n\n// load all javascript once the document is ready.\n$(document).ready(function(){\n    timeCard.WorkType();\n    timeCard.loseFocusOnDOW();\n    timeCard.loseFocusOnType();\n    timeCard.doHoursExistForWorkTypeDescription();\n\n});\n\n$(\"#timeCardCalendar\").mouseover(function() {\n    $(this).css('cursor', 'pointer');\n});\n\n$(\"#timeCardCalendar\").focusin(function() {\n    $(this).css({ 'color': 'darkgray'});\n    $(\"#timeCardCalendar\").datepicker({dateFormat: \"yy-mm-dd\",\n        onSelect: function()\n        {\n            var myVal = new Date($(this).datepicker('getDate'));\n            $(\"#formNext\").attr(\"action\", appGlobal.timeCardURI + (myVal.toISOString()).substr(0,10));\n            $(\"#formNext\").submit();\n        }\n    });\n});\n\n// populate the work type drop-down box on the TimeCard View.\ntimeCard.WorkType = function() {\n    if (appGlobal.clientId) {\n        $.ajax({\n            type: \"GET\",\n            url: appGlobal.workURI + appGlobal.clientId,\n            contentType: \"application/json; charset=utf8\",\n            dataType: \"json\",\n            success: function(data) {\n                $.each(data,function(i,item) {\n                    $('#workType').append(\"<option value=\" + data[i].id + \">\" + data[i].type + \"--\" + data[i].work_type_description + \"</option>\");\n                });\n            },\n            complete: function() {\n            }\n        });\n    }\n}\n\n// SaveButton class to save state of required input fields.\ntimeCard.SaveButton = function(type, calledFrom, bInError) {\n    this.hours = [0,0,0,0,0,0,0];\n    this.isHourInError=[0,0,0,0,0,0,0];\n    this.type = type;\n    this.calledFromWorkType=calledFrom;\n};\ntimeCard.SaveButton.prototype.areHoursSet = function() {\n    var sum=0;\n    this.hours.forEach(function(pos){sum+=pos});\n    return sum;\n};\ntimeCard.SaveButton.prototype.getHours = function() {\n    return this.hours;\n};\ntimeCard.SaveButton.prototype.setHours = function(pos, value) {\n    this.hours[pos] = value ? 1 : 0;\n};\ntimeCard.SaveButton.prototype.getType = function() {\n    return this.type;\n};\ntimeCard.SaveButton.prototype.setType = function(type) {\n    this.type = type;\n};\ntimeCard.SaveButton.prototype.getCalledFromWorkType = function() {\n    return this.calledFromWorkType;\n};\ntimeCard.SaveButton.prototype.setCalledFromWorkType = function(bool) {\n    this.calledFromWorkType = bool;\n};\ntimeCard.SaveButton.prototype.getIsHourInError = function() {\n    var sum=0;\n    this.isHourInError.forEach(function(pos){sum+=pos});\n    return sum;\n};\ntimeCard.SaveButton.prototype.setIsHourInError = function(pos, value){\n    this.isHourInError[pos] = value ? 1 : 0;\n};\ntimeCard.SaveButton.prototype.isReady = function() {\n    return !!(this.areHoursSet() && this.type && !this.getIsHourInError());\n};\n\ntimeCard.saveButton = new timeCard.SaveButton(false,false);\n\ntimeCard.enabledDisabledSaveButton = function () {\n    if (timeCard.saveButton.isReady()) {\n        $(\"#saveButtonTimeCard\").prop('disabled', false);\n    } else {\n        $(\"#saveButtonTimeCard\").prop('disabled', true);\n    }\n};\n\n\ntimeCard.loseFocusOnDOW = function() {\n\n    var dow00 = $('#dow_00');\n    dow00.focusout(function(){\n        timeCard.checkHours(timeCard.convertDOWToNumber(dow00),dow00);\n    });\n    var dow01 = $('#dow_01');\n    dow01.focusout(function(){\n        timeCard.checkHours(timeCard.convertDOWToNumber(dow01),dow01);\n    });\n    var dow02 = $('#dow_02');\n    dow02.focusout(function(){\n        timeCard.checkHours(timeCard.convertDOWToNumber(dow02),dow02);\n    });\n    var dow03 = $('#dow_03');\n    dow03.focusout(function(){\n        timeCard.checkHours(timeCard.convertDOWToNumber(dow03),dow03);\n    });\n    var dow04 = $('#dow_04');\n    dow04.focusout(function(){\n        timeCard.checkHours(timeCard.convertDOWToNumber(dow04),dow04);\n    });\n    var dow05 = $('#dow_05');\n    dow05.focusout(function(){\n        timeCard.checkHours(timeCard.convertDOWToNumber(dow05),dow05);\n    });\n    var dow06 = $('#dow_06');\n    dow06.focusout(function(){\n        timeCard.checkHours(timeCard.convertDOWToNumber(dow06),dow06);\n    });\n\n    timeCard.checkHours = function(i,dow) {\n        timeCard.processDOW(dow);\n        timeCard.doHoursExistForWorkTypeDescription(i,dow);\n        timeCard.enabledDisabledSaveButton();\n    };\n\n    timeCard.processDOW = function(dow) {\n        var value = dow.text($(this)).val();\n        if (Number(value) == 0) {\n            timeCard.setColorSuccess(dow);\n            timeCard.setHoursFailure(dow);\n        } else if (Number(value) < 0 ||\n            Number(value) > 24 ||\n            isNaN(Number(value))) {\n            timeCard.setFalseState(dow);\n        } else {\n            value = Math.round(value * 100) / 100;\n            dow.text($(this)).val(value);\n            timeCard.setTrueState(dow);\n        }\n    };\n\n    timeCard.setResetState = function(dow) {\n        timeCard.setColorSuccess(dow);\n    };\n\n    timeCard.setTrueState = function(dow) {\n        timeCard.setColorSuccess(dow);\n        timeCard.setHoursSuccess(dow);\n    };\n\n    timeCard.setFalseState = function(dow) {\n        timeCard.setColorFailure(dow);\n        timeCard.setHoursFailure(dow);\n    };\n\n    timeCard.setColorSuccess = function(dow) {\n        dow.css('background-color', 'white');\n        timeCard.saveButton.setIsHourInError(timeCard.convertDOWToNumber(dow),false);\n    };\n\n    timeCard.setColorFailure = function(dow) {\n        dow.css('background-color', 'pink');\n        timeCard.saveButton.setIsHourInError(timeCard.convertDOWToNumber(dow),true);\n    };\n\n    timeCard.setHoursSuccess = function(dow) {\n        timeCard.saveButton.setHours(timeCard.convertDOWToNumber(dow), true);\n    };\n\n    timeCard.setHoursFailure = function(dow) {\n        timeCard.saveButton.setHours(timeCard.convertDOWToNumber(dow), false);\n    };\n\n\n\n    timeCard.setTrueStateTableCell = function(cell) {\n        cell.style.color = \"black\";\n        cell.style.fontWeight = 'normal';\n        cell.style.color = \"black\";\n        cell.style.fontWeight = 'normal';\n    };\n\n    timeCard.setFalseStateTableCell = function(cell) {\n        cell.style.color = \"pink\";\n        cell.style.fontWeight = 'bold';\n        cell.style.color = \"pink\";\n        cell.style.fontWeight = 'bold';\n    };\n\n    timeCard.changeNullToZero = function(value) {\n        if (value == \"\") {\n            return 0;\n        }\n\n        return value;\n    };\n\n    timeCard.doHoursExistForWorkTypeDescription = function(column,dow) {\n\n        var colWorkTypeDesc=0;\n        var dowValue=0;\n        var tblValue=0;\n\n        var workTypeDesc = $('#workType option:selected').text();\n        var tblWorkTypeDesc=\"\";\n\n        var table = document.getElementById(\"timeCardTable\");\n\n        // early exit when the time card has no rows.\n        if (table == null) {\n            return;\n        }\n\n        for (var i = 0, row; row = table.rows[i]; i++) {\n            // firefox has an issue with .innerText\n            var tmpCell = row.cells[colWorkTypeDesc];\n            tblWorkTypeDesc = tmpCell.innerText || tmpCell.textContent;\n            if (workTypeDesc == tblWorkTypeDesc) {\n                dowValue=Number(timeCard.changeNullToZero(dow.val()));\n                tblValue=Number(row.cells[column].innerText || row.cells[column].textContent);\n                if (dowValue>0 && tblValue>0) {\n                    timeCard.setFalseState(dow);\n                    timeCard.setFalseStateTableCell(row.cells[column]);\n                    timeCard.saveButton.setCalledFromWorkType(false);\n                } else if (dowValue==0 && tblValue>0 ||\n                           dowValue==0 && tblValue==0 ) {\n                    timeCard.setResetState(dow);\n                    timeCard.setTrueStateTableCell(row.cells[column]);\n                } else if (dowValue>0 && tblValue==0) {\n                    timeCard.setTrueState(dow);\n                    timeCard.setTrueStateTableCell(row.cells[column]);\n                }\n            } else {\n                if (timeCard.saveButton.getCalledFromWorkType()) {\n                    timeCard.setColorSuccess(dow);\n                    timeCard.setTrueStateTableCell(row.cells[column]);\n                }\n            }\n        }\n    }\n};\n\n\ntimeCard.loseFocusOnType = function() {\n\n    var selector=$('#workType');\n\n    timeCard.checkForTableResets = function() {\n        for (var i=1;i<8;i++) {\n            timeCard.saveButton.setCalledFromWorkType(true);\n            timeCard.doHoursExistForWorkTypeDescription(i,timeCard.convertColumnToDOW(i));\n        }\n        timeCard.saveButton.setCalledFromWorkType(false);\n    };\n\n    timeCard.checkType = function() {\n        var v1 = Math.floor(selector.val());\n\n        timeCard.saveButton.setType(false);\n        timeCard.enabledDisabledSaveButton();\n        if (v1 === 0) {\n            timeCard.saveButton.setType(false);\n            timeCard.enabledDisabledSaveButton();\n            selector.empty();\n            selector.append(\"<option value='0'>--Select Type--</option>\");\n            timeCard.WorkType();\n        } else {\n            timeCard.checkForTableResets();\n\n            timeCard.saveButton.setType(true);\n            timeCard.enabledDisabledSaveButton();\n        }\n    };\n\n    selector.change(function () {\n        timeCard.checkType();\n    });\n};\n\ntimeCard.convertColumnToDOW = function(col) {\n\n    if (col == 1 ) {\n        return $('#dow_00');\n    }\n    if (col == 2 ) {\n        return $('#dow_01');\n    }\n    if (col == 3 ) {\n        return $('#dow_02');\n    }\n    if (col == 4 ) {\n        return $('#dow_03');\n    }\n    if (col == 5 ) {\n        return $('#dow_04');\n    }\n    if (col == 6 ) {\n        return $('#dow_05');\n    }\n    if (col == 7 ) {\n        return $('#dow_06');\n    }\n};\n\ntimeCard.convertDOWToNumber = function(dow) {\n\n    var value = dow.selector;\n\n    if (value == \"#dow_00\") {\n        return 1;\n    } else if (value  == \"#dow_01\") {\n        return 2;\n    } else if (value  == \"#dow_02\") {\n        return 3;\n    } else if (value  == \"#dow_03\") {\n        return 4;\n    } else if (value  == \"#dow_04\") {\n        return 5;\n    } else if (value  == \"#dow_05\") {\n        return 6;\n    } else if (value  == \"#dow_06\") {\n        return 7;\n    }\n};\n\n//timeCard.deleteButton = function() {\n//    var value=$(\"button:contains('deleteButton')\").val();\n//    //if (value != undefined) {\n//        value = value.split(' ').join('_');\n//        $(\"button:contains('deleteButton')\").val(value);\n//    //}\n//};\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/**\n * Created by richjones on 1/26/16.\n */\n\n\n// load all javascript once the document is ready.\n$(document).ready(function(){\n\n    causeTheTopLineOfTableHeaderToFade();\n\n});\n\nfunction causeTheTopLineOfTableHeaderToFade() {\n    var valueIs = $('#thAlertMessage').val();\n    if (typeof valueIs != 'undefined') {\n\n        // reload time card work type drop down on RDBMS failure.\n        timeCard.WorkType();\n\n        setTimeout(function () {\n            document.getElementById('thAlertMessage').style.display='none';\n            $('#thNoAlertMessage').fadeIn(3000);\n        }, 10000);\n    }\n}\n"],"sourceRoot":"/source/"}