{"version":3,"sources":["TaskView.js","TaskTypeView.js","TimeCardView.js"],"names":[],"mappingsjtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["\n// load all javascript once the document is ready.\n$(document).ready(function(){\n    //$(\"body\").css(\"display\", \"none\");\n    //$(\"body\").fadeIn(1500);\n\n    String.prototype.isEmpty = function() {\n        return (this.length === 0 || !this.trim());\n    };\n\n    TaskType();\n    isValidHourMinute();\n    getStartTime();\n    getEndTime();\n    loseFocusOnStartTime();\n    loseFocusOnEndTime();\n    loseFocusOnType();\n    enabledDisabledSaveButton();\n    onClickOnSaveButton();\n    causeTheTopLineOfTableHeaderToFade();\n\n});\n\nfunction causeTheTopLineOfTableHeaderToFade() {\n    var valueIs = $('#thAlertMessage').val();\n    if (typeof valueIs != 'undefined') {\n        (setTimeout(function () {\n            document.getElementById('thAlertMessage').style.display='none';\n            $('#thNoAlertMessage').fadeIn(3000);\n            //document.getElementById('thAlertMessage').style.display='none';\n            //document.getElementById('thNoAlertMessage').style.display='block';\n            //$('#thNoAlertMessage').css('display', '');\n        }, 10000))();\n    }\n}\n\n//// set the width of the td for the second table to th width of the first table.\n//function setTheWidthOfTheTableDetailForTheSecondTableToTableHeadingWidthOfTheFirstTable() {\n//    document.getElementById(\"tdTypeId\").style.width=$(\"#thTypeId\").css(\"width\");\n//    document.getElementById(\"tdStartt\").style.width=$(\"#thStartt\").css(\"width\");\n//    document.getElementById(\"tdEndt\").style.width=$(\"#thEndt\").css(\"width\");\n//    document.getElementById(\"tdHoursWorked\").style.width=$(\"#thHoursWorked\").css(\"width\");\n//    document.getElementById(\"tdNotes\").style.width=$(\"#thNotes\").css(\"width\");\n//}\n\n// convert rgb into hex for ez'er comparisons.\nfunction rgb2hex(rgb){\n    rgb = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n    return \"#\" +\n        (\"0\" + parseInt(rgb[1],10).toString(16)).slice(-2) +\n        (\"0\" + parseInt(rgb[2],10).toString(16)).slice(-2) +\n        (\"0\" + parseInt(rgb[3],10).toString(16)).slice(-2);\n}\n\n// SaveButton class to save state of required input fields.\nfunction SaveButton(type, startt, endt) {\n    this.type = type;\n    this.startt = startt;\n    this.endt = endt;\n}\nSaveButton.prototype.getType = function() {\n    return this.type;\n};\nSaveButton.prototype.setType = function(type) {\n    this.type = type;\n};\nSaveButton.prototype.getStartt = function() {\n    return this.startt;\n};\nSaveButton.prototype.setStartt = function(startt) {\n    this.startt = startt;\n};\nSaveButton.prototype.getEndt = function() {\n    return this.endt;\n};\nSaveButton.prototype.setEndt = function(endt) {\n    this.endt = endt;\n};\nSaveButton.prototype.isReady = function() {\n    if (this.type && this.startt && this.endt) {\n        return true;\n    }\n\n    return false;\n};\n\nvar saveButton = new SaveButton(false,false,false);\n\n// populate the type drop-down box on the Task View.\nfunction TaskType() {\n    //$('#taskType').empty();\n    //$('#taskType').append(\"<caption>Loading...</caption>\");\n    $.ajax({\n        type: \"GET\",\n        url: \"/get_all_tasks\",\n        contentType: \"application/json; charset=utf8\",\n        dataType: \"json\",\n        success: function(data) {\n            //$('#taskType').empty();\n            //$('#taskType').append(\"<option value='0'>--Select Type--</option>\");\n            $.each(data,function(i,item) {\n                $('#taskType').append(\"<option value=\" + data[i].id + \">\" + data[i].type + \"</option>\");\n            });\n        },\n        complete: function() {\n        }\n    });\n\n}\n\n// time validation are performed via http://momentjs.com/\nfunction isValidHourMinute(ttime) {\n\n    var myDateTime = \"1960-10-03 \" + ttime;\n    var formats = [\"YYYY-MM-DD LT\",\"YYYY-MM-DD h:mm:ss A\",\"YYYY-MM-DD HH:mm:ss\",\"YYYY-MM-DD HH:mm\"];\n\n    if (moment(myDateTime, formats, true).isValid()) {\n        return true;\n    }\n\n    return false;\n\n}\n\n// populate start and end time boxes.\n// for more details, see https://github.com/jonthornton/jquery-timepicker#timepicker-plugin-for-jquery\nfunction getStartTime() {\n    $('#startt-search').timepicker({'show2400' : true,\n                             'timeFormat': 'H:i',\n                             'scrollDefault': 'now',\n                             'useSelect' : false });\n}\nfunction getEndTime() {\n    $('#endt-search').timepicker({'show2400' : true,\n                           'timeFormat': 'H:i',\n                           'scrollDefault': 'now',\n                           'useSelect' : false });\n}\n\n// calculate hours worked and populate the hours worked cell.\nfunction loseFocusOnEndTime() {\n    $(\"#endt-search\").focusout(function(){\n        var t1Str = $('#startt-search').text($(this)).val();\n        var t1 = t1Str.split(':');\n\n        var t2Str = $('#endt-search').text($(this)).val();\n        if (!isValidHourMinute(t2Str) && !t2Str.isEmpty()) {\n            $('#endt-search').css('background-color', 'pink');\n            saveButton.setEndt(false);\n            enabledDisabledSaveButton();\n            $('#hoursWorked').val(\"\");\n\n            return;\n        }\n        else {\n            $('#endt-search').css('background-color', 'white');\n            saveButton.setEndt(true);\n            enabledDisabledSaveButton();\n        }\n        var t2 = t2Str.split(':');\n\n        if (!t2Str.isEmpty() && !checkForEndTimeOverlaps()) {\n            saveButton.setEndt(false);\n            enabledDisabledSaveButton();\n            $('#hoursWorked').val(\"\");\n\n            return;\n        }\n\n        if (!t1Str.isEmpty() && !t2Str.isEmpty()) {\n            var beginningTime = moment({H: t1[0], s: t1[1]});\n            var endTime = moment({H: t2[0], s: t2[1]});\n            if (!beginningTime.isBefore(endTime)) {\n                $('#endt-search').css('background-color', 'pink');\n                saveButton.setEndt(false);\n                enabledDisabledSaveButton();\n                $('#hoursWorked').val(\"\");\n\n                return;\n            }\n            else {\n                $('#endt-search').css('background-color', 'white');\n                saveButton.setEndt(true);\n                enabledDisabledSaveButton();\n            }\n\n            if (rgb2hex($('#startt-search').css('background-color')) === rgb2hex($('#endt-search').css('background-color')) &&\n                rgb2hex($('#endt-search').css('background-color')) === \"#ffffff\") {\n                var t1Min = Math.floor(t1[0]) *60 + Math.floor(t1[1]);\n                var t2Min = Math.floor(t2[0]) *60 + Math.floor(t2[1]);\n\n                var diff = (t2Min - t1Min)/60;\n\n                $('#hoursWorked').val(Math.round(diff * 10000 )/10000);\n            }\n        }\n    });\n}\n\nfunction loseFocusOnStartTime() {\n    $(\"#startt-search\").focusout(function(){\n        var t1Str = $('#startt-search').text($(this)).val();\n        if (!isValidHourMinute(t1Str) && !t1Str.isEmpty()) {\n            $('#startt-search').css('background-color', 'pink');\n            saveButton.setStartt(false);\n            enabledDisabledSaveButton();\n            $('#hoursWorked').val(\"\");\n\n            return;\n        }\n        else {\n            $('#endt-search').css('background-color', 'white');\n            $('#startt-search').css('background-color', 'white');\n            saveButton.setStartt(true);\n            enabledDisabledSaveButton();\n        }\n        var t1 = t1Str.split(':');\n\n        if (!checkForStartTimeOverlaps()) {\n            saveButton.setStartt(false);\n            enabledDisabledSaveButton();\n            $('#hoursWorked').val(\"\");\n\n            return;\n        }\n\n        var t2Str = $('#endt-search').text($(this)).val();\n        var t2 = t2Str.split(':');\n\n        if (t1Str.isEmpty() && t2Str.isEmpty()) {\n            clearTaskTable();\n        }\n\n        if (!t1Str.isEmpty() && !t2Str.isEmpty()) {\n            var beginningTime = moment({H: t1[0], s: t1[1]});\n            var endTime = moment({H: t2[0], s: t2[1]});\n            if (!beginningTime.isBefore(endTime)) {\n                $('#startt-search').css('background-color', 'pink');\n                saveButton.setStartt(false);\n                enabledDisabledSaveButton();\n                $('#hoursWorked').val(\"\");\n\n                return;\n            }\n            else {\n                $('#startt-search').css('background-color', 'white');\n                saveButton.setStartt(true);\n                enabledDisabledSaveButton();\n            }\n\n            if (rgb2hex($('#startt-search').css('background-color')) === rgb2hex($('#endt-search').css('background-color')) &&\n                rgb2hex($('#endt-search').css('background-color')) === \"#ffffff\") {\n                var t1Min = Math.floor(t1[0]) *60 + Math.floor(t1[1]);\n                var t2Min = Math.floor(t2[0]) *60 + Math.floor(t2[1]);\n\n                var diff = (t2Min - t1Min)/60;\n\n                $('#hoursWorked').val(Math.round(diff * 10000 )/10000);\n            }\n        }\n    });\n}\n\nfunction loseFocusOnType() {\n    $(\"#taskType\").change(function () {\n        var v1 = Math.floor($('#taskType').val());\n\n        if (v1 === 0) {\n            saveButton.setType(false);\n            enabledDisabledSaveButton();\n            $(\"#taskType\").empty();\n            $('#taskType').append(\"<option value='0'>--Select Type--</option>\");\n            TaskType();\n        } else {\n            saveButton.setType(true);\n            enabledDisabledSaveButton();\n        }\n    });\n}\n\nfunction onClickOnSaveButton() {\n    $(\"#saveButton\").click(function () {\n        $(\"#hoursWorked\").prop('disabled', false);\n    });\n}\n\nfunction enabledDisabledSaveButton() {\n    if (saveButton.isReady()) {\n        $(\"#saveButton\").prop('disabled', false);\n    } else {\n        $(\"#saveButton\").prop('disabled', true);\n    }\n}\n\nfunction checkForStartTimeOverlaps() {\n\n    var table = document.getElementById(\"taskTable\");\n    for (var i = 0, row; row = table.rows[i]; i++) {\n        var t1Str = $('#startt-search').text($(this)).val();\n        var t1 = t1Str.split(':');\n        var timeToCheck = moment({H: t1[0], m: t1[1]});\n\n        var t2Str = row.cells[1].innerHTML;\n        var t2 = t2Str.split(':');\n        var cellStartTime = moment({H: t2[0], m: t2[1]});\n\n        var t2Str = row.cells[2].innerHTML;\n        var t2 = t2Str.split(':');\n        var cellEndTime = moment({H: t2[0], m: t2[1]});\n        var cellEndTimeLess1Second = moment({H: t2[0], m: t2[1]}).subtract(1, 'seconds');\n\n        if (!timeToCheck.isBefore(cellStartTime) && !timeToCheck.isAfter(cellEndTime)) {\n            if (!timeToCheck.isBefore(cellStartTime) && !timeToCheck.isAfter(cellEndTimeLess1Second)) {\n                $('#startt-search').css('background-color', 'pink');\n                row.cells[1].style.color = \"pink\";\n                row.cells[1].style.fontWeight = 'bold';\n                row.cells[2].style.color = \"pink\";\n                row.cells[2].style.fontWeight = 'bold';\n\n                return false;\n            } else {\n                $('#startt-search').css('background-color', 'white');\n                row.cells[1].style.color = \"black\";\n                row.cells[1].style.fontWeight = 'normal';\n                row.cells[2].style.color = \"black\";\n                row.cells[2].style.fontWeight = 'normal';\n            }\n        }\n    }\n\n    //if (!timeToCheck.isBefore(cellEndTime)) {\n    //    clearTaskTable();\n    //}\n\n    saveButton.setStartt(true);\n    enabledDisabledSaveButton();\n\n    return true;\n}\n\nfunction checkForEndTimeOverlaps() {\n\n    var table = document.getElementById(\"taskTable\");\n    for (var i = 0, row; row = table.rows[i]; i++) {\n        var t1Str = $('#endt-search').text($(this)).val();\n        var t1 = t1Str.split(':');\n        var timeToCheck = moment({H: t1[0], m: t1[1]});\n        var timeToCheckLess1Second = moment({H: t1[0], m: t1[1]}).subtract(1, 'seconds');\n\n\n        var t2Str = row.cells[1].innerHTML;\n        var t2 = t2Str.split(':');\n        var cellStartTime = moment({H: t2[0], m: t2[1]});\n\n        var t2Str = row.cells[2].innerHTML;\n        var t2 = t2Str.split(':');\n        var cellEndTime = moment({H: t2[0], m: t2[1]});\n\n        if (!timeToCheck.isBefore(cellStartTime) && !timeToCheck.isAfter(cellEndTime)) {\n            if (!timeToCheckLess1Second.isBefore(cellStartTime) && !timeToCheckLess1Second.isAfter(cellEndTime)) {\n                $('#endt-search').css('background-color', 'pink');\n                row.cells[1].style.color = \"pink\";\n                row.cells[1].style.fontWeight = 'bold';\n                row.cells[2].style.color = \"pink\";\n                row.cells[2].style.fontWeight = 'bold';\n\n                return false;\n            } else {\n                $('#endt-search').css('background-color', 'white');\n                row.cells[1].style.color = \"black\";\n                row.cells[1].style.fontWeight = 'normal';\n                row.cells[2].style.color = \"black\";\n                row.cells[2].style.fontWeight = 'normal';\n            }\n        }\n    }\n\n    //if (!timeToCheck.isAfter(cellStartTime)) {\n    //    clearTaskTable();\n    //}\n    saveButton.setEndt(true);\n    enabledDisabledSaveButton();\n\n    return true;\n}\n\nfunction clearTaskTable() {\n\n    var table = document.getElementById(\"taskTable\");\n    for (var i = 0, row; row = table.rows[i]; i++) {\n        row.cells[1].style.color = \"black\";\n        row.cells[1].style.fontWeight = 'normal';\n        row.cells[2].style.color = \"black\";\n        row.cells[2].style.fontWeight = 'normal';\n    }\n    saveButton.setStartt(true);\n    saveButton.setEndt(true);\n    enabledDisabledSaveButton();\n\n    return true;\n}\n","\n// namespace.\nvar taskType = {};\n\n// load all javascript once the document is ready.\n$(document).ready(function(){\n    taskType.loseFocusOnTaskType();\n    taskType.loseFocusOnDescription();\n    taskType.causeTheTopLineOfTableHeaderToFade();\n});\n\n// SaveButton class to save state of required input fields.\ntaskType.SaveButton = function(taskType, description) {\n    this.taskType = taskType;\n    this.description = description;\n}\ntaskType.SaveButton.prototype.getType = function() {\n    return this.taskType;\n};\ntaskType.SaveButton.prototype.setType = function(taskType) {\n    this.taskType = taskType;\n};\ntaskType.SaveButton.prototype.getDescription = function() {\n    return this.description;\n};\ntaskType.SaveButton.prototype.setDescription = function(description) {\n    this.description = description;\n};\ntaskType.SaveButton.prototype.isReady = function() {\n    if (this.taskType && this.description) {\n        return true;\n    }\n\n    return false;\n};\n\ntaskType.saveButton = new taskType.SaveButton(false,false);\n\nfunction enabledDisabledSaveButton01() {\n    if (taskType.saveButton.isReady()) {\n        $(\"#saveButtonTaskType\").prop('disabled', false);\n    } else {\n        $(\"#saveButtonTaskType\").prop('disabled', true);\n    }\n}\n\ntaskType.causeTheTopLineOfTableHeaderToFade = function() {\n    var valueIs = $('#thAlertMessage').val();\n    if (typeof valueIs != 'undefined') {\n        (setTimeout(function () {\n            document.getElementById('thAlertMessage').style.display='none';\n            $('#thNoAlertMessage').fadeIn(3000);\n            //document.getElementById('thAlertMessage').style.display='none';\n            //document.getElementById('thNoAlertMessage').style.display='block';\n            //$('#thNoAlertMessage').css('display', '');\n        }, 10000))();\n    }\n}\n\n// rom http://www.mediacollege.com/internet/javascript/text/count-words.html\ntaskType.countWords = function countWords(s){\n    //s = s.replace(/(^\\s*)|(\\s*$)/gi,\"\");//exclude  start and end white-space\n    //s = s.replace(/[ ]{2,}/gi,\" \");//2 or more space to 1\n    //s = s.replace(/\\n /,\"\\n\"); // exclude newline with a start spacing\n    return s.split(' ').length;\n};\n\ntaskType.isTaskTypeADuplicate = function() {\n\n    var table = document.getElementById(\"taskTypeTable\");\n    for (var i = 0, row; row = table.rows[i]; i++) {\n        var t1Str = $('#taskType01').text($(this)).val();\n\n        var t2Str = row.cells[0].innerHTML;\n\n        if (t1Str.toUpperCase() === t2Str.toUpperCase()) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// check for single none duplicated words.\ntaskType.loseFocusOnTaskType = function() {\n    $(\"#taskType01\").focusout(function(){\n        var t1Str = $('#taskType01').text($(this)).val();\n\n        // only allow one word\n        if (taskType.countWords(t1Str) > 1) {\n            $('#taskType01').css('background-color', 'pink');\n\n            $('#taskTypeHeader').text(\"Error: Type restricted to one word.\");\n            $('#taskTypeHeader').css('color', 'brown');\n            $('#taskTypeHeader').css('font-weight', 'bold');\n            taskType.saveButton.setType(false);\n            enabledDisabledSaveButton01();\n\n            return;\n        }\n\n        // nothing entered\n        if (t1Str.isEmpty()) {\n            taskType.saveButton.setType(false);\n            enabledDisabledSaveButton01();\n\n            return;\n        }\n\n        if (taskType.isTaskTypeADuplicate()) {\n            $('#taskType01').css('background-color', 'pink');\n\n            $('#taskTypeHeader').text(\"Error: Type already exists.\");\n            $('#taskTypeHeader').css('color', 'brown');\n            $('#taskTypeHeader').css('font-weight', 'bold');\n            taskType.saveButton.setType(false);\n            enabledDisabledSaveButton01();\n\n            return;\n        } else {\n            $('#taskType01').css('background-color', 'white');\n            document.getElementById(\"taskTypeHeader\").style.color=$(\"#taskTypeId\").css(\"color\");\n            $('#taskTypeHeader').text(\"Task Type Maintenance\");\n        }\n\n        // place in correct format\n        var tmp = t1Str.toLowerCase();\n        tmp = tmp.charAt(0).toUpperCase() + tmp.slice(1);\n        $('#taskType01').val(tmp);\n\n        taskType.saveButton.setType(true);\n        enabledDisabledSaveButton01();\n\n    });\n}\n\n// must have a value.\ntaskType.loseFocusOnDescription = function() {\n    $(\"#description\").focusout(function(){\n        var t1Str = $('#description').text($(this)).val();\n\n        // nothing entered\n        if (t1Str.isEmpty()) {\n            taskType.saveButton.setDescription(false);\n            enabledDisabledSaveButton01();\n\n            return;\n        }\n\n        // place in correct format\n        var tmp = t1Str.toLowerCase();\n        tmp = tmp.charAt(0).toUpperCase() + tmp.slice(1);\n        $('#description').val(tmp);\n\n        taskType.saveButton.setDescription(true);\n        enabledDisabledSaveButton01();\n\n        // tab to save button\n        $(\"#saveButtonTaskType\").focus();\n\n    });\n}\n\n\n\n\n","\n// namespace.\nvar TimeCard = {};\n\n// load all javascript once the document is ready.\n$(document).ready(function(){\n\n});\n\n$(\"#timeCardCalendar\").mouseover(function() {\n    $(this).css('cursor', 'pointer');\n});\n\n$(\"#timeCardCalendar\").focusin(function() {\n    $(this).css({ 'color': 'darkgray'});\n    $(\"#timeCardCalendar\").datepicker({dateFormat: \"yy-mm-dd\",\n        onSelect: function()\n        {\n            var myVal = new Date($(this).datepicker('getDate'));\n            $(\"#formNext\").attr(\"action\", \"http://timetrax.dev/timeCard/\" + (myVal.toISOString()).substr(0,10));\n            $(\"#formNext\").submit();\n        }\n    });\n});\n\n// populate the work type drop-down box on the Task View.\nfunction TaskType() {\n    //$('#taskType').empty();\n    //$('#taskType').append(\"<caption>Loading...</caption>\");\n    $.ajax({\n        type: \"GET\",\n        url: \"/get_all_tasks\",\n        contentType: \"application/json; charset=utf8\",\n        dataType: \"json\",\n        success: function(data) {\n            //$('#taskType').empty();\n            //$('#taskType').append(\"<option value='0'>--Select Type--</option>\");\n            $.each(data,function(i,item) {\n                $('#taskType').append(\"<option value=\" + data[i].id + \">\" + data[i].type + \"</option>\");\n            });\n        },\n        complete: function() {\n        }\n    });\n\n}\n\n\n\n\n\n\n\n"],"sourceRoot":"/source/"}